{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "{\"createdOn\":\"Mac\",\"createdBy\":\"Amplify\",\"createdWith\":\"12.1.1\",\"stackType\":\"function-Lambda\",\"metadata\":{}}",
  "Parameters": {
    "CloudWatchRule": {
      "Type": "String",
      "Default": "NONE",
      "Description": " Schedule Expression"
    },
    "deploymentBucketName": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    },
    "s3Key": {
      "Type": "String"
    },
    "apilsApiApiName": {
      "Type": "String",
      "Default": "apilsApiApiName"
    },
    "apilsApiApiId": {
      "Type": "String",
      "Default": "apilsApiApiId"
    },
    "authlsAuthUserPoolId": {
      "Type": "String",
      "Default": "authlsAuthUserPoolId"
    },
    "storageCaseName": {
      "Type": "String",
      "Default": "storageCaseName"
    },
    "storageCaseArn": {
      "Type": "String",
      "Default": "storageCaseArn"
    },
    "storageCaseStreamArn": {
      "Type": "String",
      "Default": "storageCaseStreamArn"
    },
    "storageECRName": {
      "Type": "String",
      "Default": "storageECRName"
    },
    "storageECRArn": {
      "Type": "String",
      "Default": "storageECRArn"
    },
    "storageECRStreamArn": {
      "Type": "String",
      "Default": "storageECRStreamArn"
    },
    "storageUserName": {
      "Type": "String",
      "Default": "storageUserName"
    },
    "storageUserArn": {
      "Type": "String",
      "Default": "storageUserArn"
    },
    "storageUserStreamArn": {
      "Type": "String",
      "Default": "storageUserStreamArn"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "aws:asset:path": "./src",
        "aws:asset:property": "Code"
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "s3Key"
          }
        },
        "Handler": "index.handler",
        "FunctionName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "postECR",
            {
              "Fn::Join": [
                "",
                [
                  "postECR",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "Environment": {
          "Variables": {
            "ENV": {
              "Ref": "env"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "API_LSAPI_APINAME": {
              "Ref": "apilsApiApiName"
            },
            "API_LSAPI_APIID": {
              "Ref": "apilsApiApiId"
            },
            "AUTH_LSAUTH_USERPOOLID": {
              "Ref": "authlsAuthUserPoolId"
            },
            "STORAGE_CASE_NAME": {
              "Ref": "storageCaseName"
            },
            "STORAGE_CASE_ARN": {
              "Ref": "storageCaseArn"
            },
            "STORAGE_CASE_STREAMARN": {
              "Ref": "storageCaseStreamArn"
            },
            "STORAGE_ECR_NAME": {
              "Ref": "storageECRName"
            },
            "STORAGE_ECR_ARN": {
              "Ref": "storageECRArn"
            },
            "STORAGE_ECR_STREAMARN": {
              "Ref": "storageECRStreamArn"
            },
            "STORAGE_USER_NAME": {
              "Ref": "storageUserName"
            },
            "STORAGE_USER_ARN": {
              "Ref": "storageUserArn"
            },
            "STORAGE_USER_STREAMARN": {
              "Ref": "storageUserStreamArn"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Layers": [],
        "Timeout": 25
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "locatingsurvivorsLambdaRole6023bc30",
            {
              "Fn::Join": [
                "",
                [
                  "locatingsurvivorsLambdaRole6023bc30",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "lambdaexecutionpolicy": {
      "DependsOn": [
        "LambdaExecutionRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "lambda-execution-policy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "LambdaFunction"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "AmplifyResourcesPolicy": {
      "DependsOn": [
        "LambdaExecutionRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "amplify-lambda-execution-policy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:POST",
                "apigateway:PUT",
                "apigateway:GET",
                "apigateway:HEAD",
                "apigateway:OPTIONS",
                "apigateway:PATCH",
                "apigateway:DELETE"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      "::/restapis/",
                      {
                        "Ref": "apilsApiApiName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:ConfirmSignUp",
                "cognito-idp:AdminCreateUser",
                "cognito-idp:CreateUserImportJob",
                "cognito-idp:AdminSetUserSettings",
                "cognito-idp:AdminLinkProviderForUser",
                "cognito-idp:CreateIdentityProvider",
                "cognito-idp:AdminConfirmSignUp",
                "cognito-idp:AdminDisableUser",
                "cognito-idp:AdminRemoveUserFromGroup",
                "cognito-idp:SetUserMFAPreference",
                "cognito-idp:SetUICustomization",
                "cognito-idp:SignUp",
                "cognito-idp:VerifyUserAttribute",
                "cognito-idp:SetRiskConfiguration",
                "cognito-idp:StartUserImportJob",
                "cognito-idp:AdminSetUserPassword",
                "cognito-idp:AssociateSoftwareToken",
                "cognito-idp:CreateResourceServer",
                "cognito-idp:RespondToAuthChallenge",
                "cognito-idp:CreateUserPoolClient",
                "cognito-idp:AdminUserGlobalSignOut",
                "cognito-idp:GlobalSignOut",
                "cognito-idp:AddCustomAttributes",
                "cognito-idp:CreateGroup",
                "cognito-idp:CreateUserPool",
                "cognito-idp:AdminForgetDevice",
                "cognito-idp:AdminAddUserToGroup",
                "cognito-idp:AdminRespondToAuthChallenge",
                "cognito-idp:ForgetDevice",
                "cognito-idp:CreateUserPoolDomain",
                "cognito-idp:AdminEnableUser",
                "cognito-idp:AdminUpdateDeviceStatus",
                "cognito-idp:StopUserImportJob",
                "cognito-idp:InitiateAuth",
                "cognito-idp:AdminInitiateAuth",
                "cognito-idp:AdminSetUserMFAPreference",
                "cognito-idp:ConfirmForgotPassword",
                "cognito-idp:SetUserSettings",
                "cognito-idp:VerifySoftwareToken",
                "cognito-idp:AdminDisableProviderForUser",
                "cognito-idp:SetUserPoolMfaConfig",
                "cognito-idp:ChangePassword",
                "cognito-idp:ConfirmDevice",
                "cognito-idp:AdminResetUserPassword",
                "cognito-idp:ResendConfirmationCode",
                "cognito-identity:Describe*",
                "cognito-identity:Get*",
                "cognito-identity:List*",
                "cognito-idp:Describe*",
                "cognito-idp:AdminGetDevice",
                "cognito-idp:AdminGetUser",
                "cognito-idp:AdminList*",
                "cognito-idp:List*",
                "cognito-sync:Describe*",
                "cognito-sync:Get*",
                "cognito-sync:List*",
                "iam:ListOpenIdConnectProviders",
                "iam:ListRoles",
                "sns:ListPlatformApplications",
                "cognito-idp:ForgotPassword",
                "cognito-idp:UpdateAuthEventFeedback",
                "cognito-idp:UpdateResourceServer",
                "cognito-idp:UpdateUserPoolClient",
                "cognito-idp:AdminUpdateUserAttributes",
                "cognito-idp:UpdateUserAttributes",
                "cognito-idp:UpdateUserPoolDomain",
                "cognito-idp:UpdateIdentityProvider",
                "cognito-idp:UpdateGroup",
                "cognito-idp:AdminUpdateAuthEventFeedback",
                "cognito-idp:UpdateDeviceStatus",
                "cognito-idp:UpdateUserPool",
                "cognito-idp:DeleteUserPoolDomain",
                "cognito-idp:DeleteResourceServer",
                "cognito-idp:DeleteGroup",
                "cognito-idp:AdminDeleteUserAttributes",
                "cognito-idp:DeleteUserPoolClient",
                "cognito-idp:DeleteUserAttributes",
                "cognito-idp:DeleteUserPool",
                "cognito-idp:AdminDeleteUser",
                "cognito-idp:DeleteIdentityProvider",
                "cognito-idp:DeleteUser"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cognito-idp:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":userpool/",
                      {
                        "Ref": "authlsAuthUserPoolId"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Put*",
                "dynamodb:Create*",
                "dynamodb:BatchWriteItem",
                "dynamodb:Get*",
                "dynamodb:BatchGetItem",
                "dynamodb:List*",
                "dynamodb:Describe*",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:Update*",
                "dynamodb:RestoreTable*",
                "dynamodb:Delete*"
              ],
              "Resource": [
                {
                  "Ref": "storageCaseArn"
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Ref": "storageCaseArn"
                      },
                      "index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Put*",
                "dynamodb:Create*",
                "dynamodb:BatchWriteItem",
                "dynamodb:Get*",
                "dynamodb:BatchGetItem",
                "dynamodb:List*",
                "dynamodb:Describe*",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:Update*",
                "dynamodb:RestoreTable*",
                "dynamodb:Delete*"
              ],
              "Resource": [
                {
                  "Ref": "storageECRArn"
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Ref": "storageECRArn"
                      },
                      "index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Put*",
                "dynamodb:Create*",
                "dynamodb:BatchWriteItem",
                "dynamodb:Get*",
                "dynamodb:BatchGetItem",
                "dynamodb:List*",
                "dynamodb:Describe*",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:Update*",
                "dynamodb:RestoreTable*",
                "dynamodb:Delete*"
              ],
              "Resource": [
                {
                  "Ref": "storageUserArn"
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Ref": "storageUserArn"
                      },
                      "index/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "Name": {
      "Value": {
        "Ref": "LambdaFunction"
      }
    },
    "Arn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaFunction",
          "Arn"
        ]
      }
    },
    "Region": {
      "Value": {
        "Ref": "AWS::Region"
      }
    },
    "LambdaExecutionRole": {
      "Value": {
        "Ref": "LambdaExecutionRole"
      }
    },
    "LambdaExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaExecutionRole",
          "Arn"
        ]
      }
    }
  }
}